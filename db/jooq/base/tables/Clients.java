/*
 * This file is generated by jOOQ.
 */
package jooq.base.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.base.Keys;
import jooq.base.Public;
import jooq.base.tables.records.ClientsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clients extends TableImpl<ClientsRecord> {

    private static final long serialVersionUID = 283228767;

    /**
     * The reference instance of <code>public.CLIENTS</code>
     */
    public static final Clients CLIENTS = new Clients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientsRecord> getRecordType() {
        return ClientsRecord.class;
    }

    /**
     * The column <code>public.CLIENTS.ID</code>.
     */
    public final TableField<ClientsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.CLIENTS.FIRST_NANE</code>.
     */
    public final TableField<ClientsRecord, String> FIRST_NANE = createField("FIRST_NANE", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.CLIENTS.LAST_NAME</code>.
     */
    public final TableField<ClientsRecord, String> LAST_NAME = createField("LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>public.CLIENTS.CARD_ID</code>.
     */
    public final TableField<ClientsRecord, Integer> CARD_ID = createField("CARD_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.CLIENTS</code> table reference
     */
    public Clients() {
        this(DSL.name("CLIENTS"), null);
    }

    /**
     * Create an aliased <code>public.CLIENTS</code> table reference
     */
    public Clients(String alias) {
        this(DSL.name(alias), CLIENTS);
    }

    /**
     * Create an aliased <code>public.CLIENTS</code> table reference
     */
    public Clients(Name alias) {
        this(alias, CLIENTS);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Clients(Table<O> child, ForeignKey<O, ClientsRecord> key) {
        super(child, key, CLIENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClientsRecord> getPrimaryKey() {
        return Keys.ID_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClientsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientsRecord>>asList(Keys.ID_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClientsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientsRecord, ?>>asList(Keys.CLIENTS__CARD_ID_FKEY);
    }

    public Viewcardinfo viewcardinfo() {
        return new Viewcardinfo(this, Keys.CLIENTS__CARD_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Clients as(String alias) {
        return new Clients(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Clients as(Name alias) {
        return new Clients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(String name) {
        return new Clients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(Name name) {
        return new Clients(name, null);
    }
}
