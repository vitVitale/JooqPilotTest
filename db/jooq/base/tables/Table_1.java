/*
 * This file is generated by jOOQ.
 */
package jooq.base.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.base.Keys;
import jooq.base.Public;
import jooq.base.tables.records.Table_1Record;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Table_1 extends TableImpl<Table_1Record> {

    private static final long serialVersionUID = 2037913672;

    /**
     * The reference instance of <code>public.TABLE_1</code>
     */
    public static final Table_1 TABLE_1 = new Table_1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Table_1Record> getRecordType() {
        return Table_1Record.class;
    }

    /**
     * The column <code>public.TABLE_1.ID</code>.
     */
    public final TableField<Table_1Record, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.TABLE_1.CARD_ALIACE</code>.
     */
    public final TableField<Table_1Record, String> CARD_ALIACE = createField("CARD_ALIACE", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.TABLE_1.DATE</code>.
     */
    public final TableField<Table_1Record, String> DATE = createField("DATE", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>public.TABLE_1</code> table reference
     */
    public Table_1() {
        this(DSL.name("TABLE_1"), null);
    }

    /**
     * Create an aliased <code>public.TABLE_1</code> table reference
     */
    public Table_1(String alias) {
        this(DSL.name(alias), TABLE_1);
    }

    /**
     * Create an aliased <code>public.TABLE_1</code> table reference
     */
    public Table_1(Name alias) {
        this(alias, TABLE_1);
    }

    private Table_1(Name alias, Table<Table_1Record> aliased) {
        this(alias, aliased, null);
    }

    private Table_1(Name alias, Table<Table_1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Table_1(Table<O> child, ForeignKey<O, Table_1Record> key) {
        super(child, key, TABLE_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Table_1Record> getPrimaryKey() {
        return Keys.TABLE_1_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Table_1Record>> getKeys() {
        return Arrays.<UniqueKey<Table_1Record>>asList(Keys.TABLE_1_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Table_1 as(String alias) {
        return new Table_1(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Table_1 as(Name alias) {
        return new Table_1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Table_1 rename(String name) {
        return new Table_1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Table_1 rename(Name name) {
        return new Table_1(name, null);
    }
}
