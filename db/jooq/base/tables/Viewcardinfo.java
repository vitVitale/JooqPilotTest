/*
 * This file is generated by jOOQ.
 */
package jooq.base.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.base.Keys;
import jooq.base.Public;
import jooq.base.tables.records.ViewcardinfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Viewcardinfo extends TableImpl<ViewcardinfoRecord> {

    private static final long serialVersionUID = 1444985509;

    /**
     * The reference instance of <code>public.ViewCardInfo</code>
     */
    public static final Viewcardinfo VIEWCARDINFO = new Viewcardinfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewcardinfoRecord> getRecordType() {
        return ViewcardinfoRecord.class;
    }

    /**
     * The column <code>public.ViewCardInfo.ID</code>.
     */
    public final TableField<ViewcardinfoRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.ViewCardInfo.CARDALIACE</code>.
     */
    public final TableField<ViewcardinfoRecord, String> CARDALIACE = createField("CARDALIACE", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.ViewCardInfo.DATA</code>.
     */
    public final TableField<ViewcardinfoRecord, String> DATA = createField("DATA", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>public.ViewCardInfo</code> table reference
     */
    public Viewcardinfo() {
        this(DSL.name("ViewCardInfo"), null);
    }

    /**
     * Create an aliased <code>public.ViewCardInfo</code> table reference
     */
    public Viewcardinfo(String alias) {
        this(DSL.name(alias), VIEWCARDINFO);
    }

    /**
     * Create an aliased <code>public.ViewCardInfo</code> table reference
     */
    public Viewcardinfo(Name alias) {
        this(alias, VIEWCARDINFO);
    }

    private Viewcardinfo(Name alias, Table<ViewcardinfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Viewcardinfo(Name alias, Table<ViewcardinfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Viewcardinfo(Table<O> child, ForeignKey<O, ViewcardinfoRecord> key) {
        super(child, key, VIEWCARDINFO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ViewcardinfoRecord> getPrimaryKey() {
        return Keys.VIEWCARDINFO_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ViewcardinfoRecord>> getKeys() {
        return Arrays.<UniqueKey<ViewcardinfoRecord>>asList(Keys.VIEWCARDINFO_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Viewcardinfo as(String alias) {
        return new Viewcardinfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Viewcardinfo as(Name alias) {
        return new Viewcardinfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Viewcardinfo rename(String name) {
        return new Viewcardinfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Viewcardinfo rename(Name name) {
        return new Viewcardinfo(name, null);
    }
}
